**Objective:**

Build and automate a virtualized DevOps environment that includes infrastructure provisioning with Terraform, configuration management with Ansible, and a CI/CD pipeline using Jenkins and Git.

**Procedure:**

Step 1: Infrastructure Provisioning with Terraform

1. Install Terraform on your Windows laptop.
2. Write a Terraform script to provision three VirtualBox VMs:

VM 1: Jenkins server.

VM 2: Web server (application deployment).

VM 3: Database server (backend service).

1. Use Terraform's VirtualBox provider to spin up the VMs and assign static IPs.

Step 2: Configuration Management with Ansible

1. Install Ansible on the Jenkins VM.
2. Set up passwordless SSH between the Jenkins VM (Ansible controller) and the target VMs (web server and database server).
3. Create Ansible playbooks:

Install and configure Apache on the web server.

Install and configure MySQL on the database server.

Set up a sample database schema.

1. Run the playbooks from the Ansible controller to configure the target VMs.

Step 3: CI/CD Pipeline with Jenkins and Git

1. Install Jenkins on the Jenkins VM.
2. Set up a Git repository (local or on GitHub) to store the application code.
3. Configure Jenkins to:

Pull the application code from the Git repository.

Build the application (e.g., using Maven for Java or pip for Python).

Deploy the application to the web server using Ansible.

Step 4: Integration and Testing

1. Write a sample application (e.g., a simple Python or Java web app).
2. Commit the code to the Git repository.
3. Trigger the Jenkins pipeline to test the end-to-end process:

Terraform provisions infrastructure.

Ansible configures services.

Jenkins deploys the application to the web server.

1. Access the application via the web server's static IP and verify database connectivity.

**Use Case:**

This project simulates a real-world DevOps workflow:

Automating infrastructure provisioning for development environments.

Configuring services dynamically with Ansible.

Setting up a continuous integration and deployment pipeline.

**Pre-requisites:**

VirtualBox installed on your Windows laptop.

At least 8 GB RAM for hosting multiple VMs.

Terraform, Jenkins, Ansible, and Git installed on respective systems.

Basic understanding of scripting and configuration management.

This project demonstrates how multiple DevOps tools can work together to streamline infrastructure management, configuration, and deployment, all within a local environment.

++++++++++++++++++++++++++Steps for execution +++++++++++++++++++++++++

### **Step-by-Step Execution with Commands**

---

### **Step 1: Infrastructure Provisioning with Terraform**

### **1. Install Terraform**

1. Download Terraform from [terraform.io](https://www.terraform.io/downloads).
2. Add the Terraform executable to your system PATH.
    
    ```bash
    terraform --version
    
    ```
    

### **2. Terraform Script**

Create a file named `main.tf` for provisioning the infrastructure.

```hcl
provider "virtualbox" {}

resource "virtualbox_vm" "jenkins_server" {
  name   = "jenkins-server"
  image  = "path_to_ubuntu_ova"
  memory = 2048
  cpu    = 2
  network_adapter {
    type           = "hostonly"
    host_interface = "vboxnet0"
  }
}

resource "virtualbox_vm" "web_server" {
  name   = "web-server"
  image  = "path_to_ubuntu_ova"
  memory = 2048
  cpu    = 2
  network_adapter {
    type           = "hostonly"
    host_interface = "vboxnet0"
  }
}

resource "virtualbox_vm" "db_server" {
  name   = "db-server"
  image  = "path_to_ubuntu_ova"
  memory = 2048
  cpu    = 2
  network_adapter {
    type           = "hostonly"
    host_interface = "vboxnet0"
  }
}

```

### **3. Initialize and Apply Terraform**

1. Initialize Terraform:
    
    ```bash
    terraform init
    
    ```
    
2. Apply the script to provision VMs:
    
    ```bash
    terraform apply -auto-approve
    
    ```
    

---

### **Step 2: Configuration Management with Ansible**

### **1. Install Ansible on Jenkins VM**

1. SSH into the Jenkins VM:
    
    ```bash
    ssh username@jenkins-server-ip
    
    ```
    
2. Install Ansible:
    
    ```bash
    sudo apt update
    sudo apt install -y ansible
    
    ```
    

### **2. Set Up Passwordless SSH**

1. Generate SSH keys on the Jenkins VM:
    
    ```bash
    ssh-keygen -t rsa
    
    ```
    
2. Copy the public key to the web server and database server:
    
    ```bash
    ssh-copy-id username@web-server-ip
    ssh-copy-id username@db-server-ip
    
    ```
    

### **3. Write Ansible Playbooks**

**Playbook 1:** Install Apache on the web server (`apache.yml`).

```yaml
- hosts: web
  tasks:
    - name: Install Apache
      apt:
        name: apache2
        state: present

    - name: Start Apache Service
      service:
        name: apache2
        state: started
        enabled: true

```

**Playbook 2:** Install MySQL on the database server (`mysql.yml`).

```yaml
- hosts: db
  tasks:
    - name: Install MySQL
      apt:
        name: mysql-server
        state: present

    - name: Start MySQL Service
      service:
        name: mysql
        state: started
        enabled: true

    - name: Create Sample Database
      mysql_db:
        name: sample_db

```

### **4. Execute Ansible Playbooks**

1. Create an inventory file (`inventory`):
    
    ```
    [web]
    web-server-ip
    
    [db]
    db-server-ip
    
    ```
    
2. Run the playbooks:
    
    ```bash
    ansible-playbook -i inventory apache.yml
    ansible-playbook -i inventory mysql.yml
    
    ```
    

---

### **Step 3: CI/CD Pipeline with Jenkins and Git**

### **1. Install Jenkins**

1. SSH into the Jenkins VM:
    
    ```bash
    ssh username@jenkins-server-ip
    
    ```
    
2. Install Jenkins:
    
    ```bash
    sudo apt update
    sudo apt install -y openjdk-11-jdk
    wget -q -O - https://pkg.jenkins.io/debian/jenkins.io.key | sudo apt-key add -
    sudo sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'
    sudo apt update
    sudo apt install -y jenkins
    sudo systemctl start jenkins
    
    ```
    
3. Access Jenkins on `http://jenkins-server-ip:8080` and complete the setup.

### **2. Set Up Git Repository**

1. Create a Git repository (local or GitHub).
2. Push a sample application (e.g., a Python Flask app).

### **3. Configure Jenkins Pipeline**

1. Create a new Jenkins pipeline job.
2. Use the following Jenkinsfile:
    
    ```groovy
    pipeline {
        agent any
        stages {
            stage('Clone Repository') {
                steps {
                    git 'https://github.com/username/repo.git'
                }
            }
            stage('Build Application') {
                steps {
                    sh 'pip install -r requirements.txt'
                }
            }
            stage('Deploy Application') {
                steps {
                    ansiblePlaybook(
                        playbook: 'deploy.yml',
                        inventory: 'inventory'
                    )
                }
            }
        }
    }
    
    ```
    
3. Create a `deploy.yml` Ansible playbook to deploy the application to the web server.

---

### **Step 4: Integration and Testing**

### **1. Write a Sample Application**

1. Example: Python Flask app (`app.py`):
    
    ```python
    from flask import Flask
    app = Flask(__name__)
    
    @app.route('/')
    def hello():
        return "Hello, World!"
    
    if __name__ == "__main__":
        app.run(host="0.0.0.0")
    
    ```
    
2. Add `requirements.txt`:
    
    ```
    flask
    
    ```
    

### **2. Commit Code and Trigger Pipeline**

1. Push code to the Git repository:
    
    ```bash
    git add .
    git commit -m "Initial commit"
    git push
    
    ```
    
2. Trigger the Jenkins pipeline to provision, configure, and deploy.

### **3. Verify Application**

1. Access the application at `http://web-server-ip`.
2. Test database connectivity if required.

---

### **End Result:**
